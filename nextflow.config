params {
	mode = "both"
	bqsr = false
	cohort_mode = false
	runID = "wgs_no_bqsr_spark"
	exome = false
	samplesheet = "/home/mateuszsypniewski/S8436/samplesheet.tsv"
	bam_samplesheet = ""
	outfolder = "/data/output/S8436"
	fasta = "/data/references/fasta/GRCh38"
	interval_list = "/data/references/fasta/GRCh38/GRCh38.interval_list"
	snv_resource = "/data/references/germline_resource/gnomAD4/gnomad_snv_v4.0_complete.vcf.gz"
	cnv_resource = "/data/references/germline_resource/gnomAD4/gnomad_cnv_v4.0_complete.vcf.gz"
	sv_resource = "/data/references/germline_resource/gnomAD4/gnomad_sv_v4.0_complete.vcf.gz"

	//Spark params
	run_spark = true
	spark_tmp = "/data/output/spark_tmp"

	//Singularity images
	singularity = ""

	// deepvariant params

	haploid_contigs = "chrX,chrY"
	par_regions_bed = "/data/references/bed/GRCh38/GRCh38_PAR.bed"

	// Annotations

	vep_cache = "/data/references/vep"
	clinvar = "/data/references/clinvar/clinvar_20240307.vcf.gz"
	genome = "GRCh38"


}

if (params.runID.isEmpty()) {
	params.runID = new java.util.Date().format( 'yyyy-MM-dd' )
}

//Report
params.tracedir = "${params.outfolder}/${params.runID}/pipeline_info"
timeline {
	enabled = true
	overwrite = true
	file = "${params.tracedir}/execution_timeline.html"
}
report {
	enabled = true
	overwrite = true
	file = "${params.tracedir}/execution_report.html"
}

profiles {
	docker {
		docker.enabled = true
		docker.fixOwnership = true
		docker.runOptions = "-v /data/references:/data/references -v /data/input/:/data/input/ -v /data/output:/data/output"

		process {
			errorStrategy = "terminate"
			maxErrors = 4
			withLabel: 'gatk' {
				executor = 'local'
				container = 'gatk:4.5.0.0'
			}
			withLabel: 'deepvariant' {
				executor = 'local'
				container = 'google/deepvariant:1.6.0'
			}
			withLabel: 'manta' {
				executor = 'local'
				container = 'manta:1.6.0'
			}
			withLabel: 'r_container' {
				executor = 'local'
				container = 'r_container:4.3.2'
			}
			withLabel: 'glnexus' {
				executor = 'local'
				container = 'glnexus:1.4.1'
			}
			withLabel: 'annotsv' {
				executor = 'local'
				container = 'annotsv:3.4'
			}
			withLabel: 'vep' {
				executor = 'local'
				container = 'vep:110'
			}
		}
	}
	singularity {
			singularity.enabled = true
			singularity.autoMounts = true
			process {
			errorStrategy = "terminate"
			maxErrors = 4
			withLabel: 'gatk' {
				container = "${params.singularity}/gatk.sif"
			}
			withLabel: 'deepvariant' {
				container = "${params.singularity}/deep_variant.sif"
			}
			withLabel: 'manta' {
				container = "${params.singularity}/manta.sif"
			}
			withLabel: 'r_container' {
				container = "${params.singularity}/r_container.sif"
			}
			withLabel: 'glnexus' {
				container = "${params.singularity}/glnexus.sif"
			}
		}

	}

	spark_cluster {
		docker.enabled = true
		docker.fixOwnership = true
		docker.runOptions = "-v /data/references:/data/references -v /data/input/fastq:/data/input/fastq -v /data/output:/data/output"

		process {
			errorStrategy = "terminate"
			maxErrors = 4
			withLabel: 'wgs_tools' {
				executor = 'local'
				container = 'gatk:4.5.0.0'
			}
			withLabel: 'r_container' {
				executor = 'local'
				container = 'r_container:4.3.2'
			}
			withLabel: 'sig' {
				executor = 'local'
				container = 'sigprofiler:1.2.19'
			}
		}
	}
}

process {
	cache = 'lenient'

	withLabel: 'mem_1GB' {
		memory = 1.GB
	}
	withLabel: 'mem_2GB' {
		memory = 2.GB
	}
	withLabel: 'mem_4GB' {
		memory = 4.GB
	}
	withLabel: 'mem_6GB' {
		memory = 6.GB
	}
	withLabel: 'mem_8GB' {
		memory = 8.GB
	}
	withLabel: 'mem_16GB' {
		memory = 16.GB
	}
	withLabel: 'mem_20GB' {
		memory = 20.GB
	}
	withLabel: 'mem_30GB' {
		memory = 30.GB
	}
	withLabel: 'mem_32GB' {
		memory = 32.GB
	}
	withLabel: 'mem_40GB' {
		memory = 40.GB
	}
	withLabel: 'mem_50GB' {
		memory = 50.GB
	}
	withLabel: 'mem_60GB' {
		memory = 60.GB
	}
	withLabel: 'mem_64GB' {
		memory = 64.GB
	}
	withLabel: 'mem_70GB' {
			memory = 70.GB
	}
	withLabel: 'mem_96GB' {
			memory = 96.GB
	}
	withLabel: 'mem_128GB' {
		memory = 128.GB
	}
	withLabel: 'core_1' {
		cpus = 1
	}
	withLabel: 'core_2' {
		cpus = 2
	}
	withLabel: 'core_4' {
		cpus = 4
	}
	withLabel: 'core_8' {
		cpus = 8
	}
	withLabel: 'core_12' {
		cpus = 12
	}
	withLabel: 'core_16' {
		cpus = 16
	}
	withLabel: 'core_18' {
		cpus = 18
        }
	withLabel: 'core_32' {
		cpus = 32
	}
	withLabel: 'core_36' {
		cpus = 36
        }
	withLabel: 'core_64' {
		cpus = 64
	}
}
